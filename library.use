model course_student

-- Enumerations
enum Category {Fantasy, SciFi, Mystery, Romance}
-- Classes

class User
attributes
isLoggedIn: Boolean
operations
borrowBook(b:Book)
returnBook(b:Book)
returnAllBooks(u:User)
logIn(l:Library)
logOut(l:Library)
end

class Id
attributes
number: Integer
end

class Book
attributes
title: String
category: Category
isborrowed : Boolean
isreserved : Boolean
publishyear : Integer
author : String
end

class Library
attributes
name: String
operations
addBook(b:Book)
removeBook(b:Book)
addUser(u:User,i:Id)
removeUser(u:User)
setCategory(b:Book)
buyMember(u:User,i:Id):Member
end

class Member < User
attributes
ismember:Boolean
operations
reserveBook(b:Book)
end



-- A S S O C I A T I O N S --
-- IdAssign: assign id to user
association IdAssign between
  User[1] role assigner
  Id[1] role id
end

-- Borrow: a user can borrow a number of books
association Borrow between
  User[1] role borrower
  Book[1..*] role borrowed
end

-- Stores: a Library stores a number of books
association Stores between
  Library[1] role contains
  Book[0..*] role belongs
end

-- Include: a Library stores a number of users
association Include between
  Library[1] role includes
  User[0..*] role joined
end

-- Reserve: a member can revserve one book
association Reserve between
  Member[1] role reserver
  Book[1] role reserved
end

constraints

context Member
inv: self.ismember=true

context Book
inv: self.author<>null and self.publishyear<>null and self.title<>null
inv: self.contains<>null

context User
inv: self.id<>null and self.includes<>null
inv: self.includes.joined.id->asSet()->size()=self.includes.joined.id->asSequence()->size()

context Id
inv: self.number <> null

context Library::addUser(u:User, i:Id)
pre: self.joined->excludes(u) and i.assigner = null
post: self.joined->includes(u)
post: u.id = i and i.assigner = u

context Library::removeUser(u:User)
pre: self.joined->includes(u) and u.borrowed->isEmpty()
post: Book.allInstances()->forAll(b: Book | if b.isreserved=true and b.reserver=null then b.isreserved = false else b=b endif)
post: self.joined->excludes(u) and User.allInstances()->excludes(u)

context Library::addBook(b:Book)
pre: self.belongs->excludes(b)
post:  self.belongs->includes(b)

context Library::removeBook(b:Book)
pre: self.belongs->includes(b) and b.isborrowed=false
post: Member.allInstances()->forAll(m: Member | if m.reserved->includes(b) then m.reserved=null else m.reserved=m.reserved endif)
post: self.belongs->excludes(b) and Book.allInstances()->excludes(b)

context User::borrowBook(b:Book)
pre: self.isLoggedIn=true and b.isborrowed=false and self.borrowed->excludes(b)
pre: if self.oclIsTypeOf(Member) then self.oclAsType(Member).reserved=null or self.oclAsType(Member).reserved = b else true endif
pre: if b.isreserved=true and b.reserver.id=self.id then true else if b.isreserved=false then true else false endif endif
post: b.isborrowed=true and b.borrower = self and self.borrowed->includes(b)
post: if b.isreserved=true and b.reserver.id=self.id then b.isreserved=false and b.reserver =null else true endif

context User::logIn(l:Library)
pre: l.joined->includes(self) and self.isLoggedIn=false
post: self.isLoggedIn=true

context User::logOut(l:Library)
pre: l.joined->includes(self) and self.isLoggedIn=true
post: self.isLoggedIn=false

context Library::buyMember(u:User, i:Id):Member
pre: u.isLoggedIn = true and self.joined->includes(u) and u.id=i
post: result.oclIsNew() and result.id = i
post: Member.allInstances()->includes(result) and self.joined->includes(result)
post: User.allInstances()->excludes(u) 
